sap.ui.define(["sap/base/Log"],function(t){"use strict";return{getEntities:async function(){const t=await fetch("api/entities",{method:"GET"});if(!t.ok){throw new Error(t.message)}return await t.json()},getRecordings:async function(){const t=await fetch("api/recordings",{method:"GET"});if(!t.ok){throw new Error(t.message)}return await t.json()},getRecording:async function(t){const e=await fetch(`api/recordings?id=${t}`,{method:"GET"});if(!e.ok){throw new Error(e.message)}return await e.json()},postRecording:async function(t){const e=JSON.stringify({name:t.name,entityId:t.entityId,begin:t.begin,end:t.end,intervalLength:t.intervalLength});const n=await fetch(`api/recordings`,{method:"POST",headers:{"Content-Type":"application/json"},body:e});if(!n.ok){throw new Error(n.message)}},deleteRecording:async function(t){const e=await fetch(`api/recordings/${t}`,{method:"DELETE"});if(!e.ok){throw new Error(e.message)}return await e.json()},getPredictions:async function(t,e=120,n=10){const o={span:e,upto:n};if(!o.span)delete o.span;if(!o.upto)delete o.upto;const a=new URLSearchParams(o);let i=`api/predictions/${t}`;if(a.size>0)i=`${i}?${a.toString()}`;const r=await fetch(i,{method:"GET"});if(!r.ok){throw new Error(r.message)}return await r.json()},getSolarInfo:async function(){const t=await fetch(`api/solarinfo`,{method:"GET"});if(!t.ok){throw new Error(t.message)}return await t.json()},getSolarForecast:async function(){const t=await fetch(`api/solarforecast`,{method:"GET"});if(!t.ok){throw new Error(t.message)}return await t.json()},getSensorReadings:async function(t,e,n){const o=await fetch(`api/readings/${t}/${e}/${n}`,{method:"GET"});if(!o.ok){throw new Error(o.message)}const a=await o.json();a.begin=e;a.end=n;return a}}});
//# sourceMappingURL=Service.js.map